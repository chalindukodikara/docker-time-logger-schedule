apiVersion: core.choreo.dev/v1
kind: BuildTemplate
metadata:
  name: buildpack-services-template
  namespace: default-org
  labels:
    template-type: microservice     # Indicates the kind of component this template is for
    language: go | node | etc       # Programming language target
    version: "v1.0"                 # Template version
spec:
  # "single": All steps run in a single pod (via containerSet)
  # "isolated": Each step runs in its own pod (via separate tasks)
  executionMode: "single"

  # Optional timeout to avoid hung builds
  timeout: "30m"

  # Global parameters (can be overridden per-Build)
  parameters:
    coverage_threshold: '{{.coverage_threshold | default "80"}}'
    builder_image: '{{.builder_image | default "gcr.io/buildpacks/builder:google-22"}}'
    run_image: '{{.run_image | default "gcr.io/buildpacks/google-22/run:latest"}}'
    docker-host: '{{index . `docker-host` | default "inherit"}}'
    platform: '{{.platform | default "linux/amd64"}}'
    env:
      BP_GO_VERSION: '{{.env.BP_GO_VERSION | default "1.22"}}'
      APP_ENV: '{{.env.APP_ENV | default "production"}}'
    limits:
      memory: '{{.limits.memory | default "128Mi"}}'
      cpu: '{{.limits.cpu | default "200m"}}'
    context: '{{.context | default "."}}'
    dockerfilePath: '{{.dockerfilePath | default "./Dockerfile"}}'
    language: '{{.language | default "go"}}'
    version: '{{.version | default "1.22"}}'
    buildArgs:
      NODE_VERSION: '{{.buildArgs.NODE_VERSION | default "18"}}'
      APP_VERSION: '{{.buildArgs.APP_VERSION | default "v1.0.0"}}'


  # Shared volumes mounted to all containers
  volumes:
    - name: podman-cache
      hostPath:
        path: /shared/podman/cache
        type: DirectoryOrCreate
    - name: test-results
      emptyDir: {}

  # PVC used for storing source code and artifacts
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 2Gi
  # STEP GRAPH
  #   • outer list  = sequential
  #   • inner list  = parallel fan-out
  steps:
    # --- Sequential Step 1: Clone the repo ---
    - - name: clone-step
        image: alpine/git
        command: [bash, -c]
        args: 
        - |-
          set -e
          git clone --single-branch --branch main --depth 1 https://github.com/wso2/choreo-samples /mnt/vol/source
          cd /mnt/vol/source
          COMMIT_SHA=$(git rev-parse HEAD)
          echo -n "$COMMIT_SHA" | cut -c1-8 > /tmp/git-revision.txt
        retries: 3 # maps to Tekton “retries”, Argo limit
        volumeMounts:
          - mountPath: /mnt/vol
            name: workspace
        outputs:
          - name: git-revision
            valueFrom:
              path: /tmp/git-revision.txt
        resource:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "{{.limits.memory}}"
            cpu: "{{.limits.cpu}}"

    # --- Sequential Step 2: Build using Podman ---
    - - name: build-step
        image: ghcr.io/openchoreo/podman-runner:v1.0
        args: |
          #!/bin/bash
          echo "Build Script"
          echo "{{.builder_image}}"
          echo "{{.run_image}}"
        securityContext:
          privileged: true
        env:
          - name: CGO_ENABLED
            value: "0"
          - name: GOPROXY
            value: "https://proxy.golang.org,direct"
          - name: GOSUMDB
            value: "sum.golang.org"
          - name: APP_VERSION
            value: "{{.buildArgs.APP_VERSION}}"
          - name: BP_GO_VERSION
            value: "{{.env.BP_GO_VERSION}}"   # Passed dynamically via inputs
        inputs:
          - name: git-revision
            value: '{{clone-step.outputs.git-revision}}'
        volumeMounts:
          - mountPath: /mnt/vol
            name: workspace
          - mountPath: /shared/podman/cache
            name: podman-cache
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "{{.limits.memory}}"
            cpu: "{{.limits.cpu}}"

    # --- Parallel Test & Linting Phase ---
    - - name: Unit Tests
        image: busybox:latest
        command: [bash, -c]
        args: |
          echo "Node version: {{.buildArgs.NODE_VERSION}}"
          echo "Running unit tests..."
          sleep 3
          echo "Unit tests completed"
          echo "unit-test-results" > /tmp/parallel-workspace/unit.txt

      - name: Integration Tests
        image: busybox:latest
        args: |
          #!/bin/bash
          echo "Running integration tests..."
          sleep 4
          echo "Integration tests completed"
          echo "integration-test-results" > /tmp/parallel-workspace/integration.txt

      - name: Linting
        image: busybox:latest
        args: |
          #!/bin/bash
          echo "Running code linting..."
          sleep 2
          echo "Linting completed"
          echo "linting-results" > /tmp/parallel-workspace/lint.txt
